# Executes commands at the start of an interactive session.
#

# Source various files under conditions

# use .zshrc.local for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
if [[ -a ~/.zshrc.local ]]
then
  source ~/.zshrc.local
fi


# Autoload our custom functions before sourcing the other zsh files
# @see https://github.com/sgeb/dotfiles/tree/master/zsh/functions

## I have Freshshell build zsh files for custom functions and prompts.
## aliased directories in order
export USR_DIR=$HOME
export FRESH_DIR=$USR_DIR/.fresh
export FRESH_BUILD_PATH=$FRESH_DIR/build
export ZSH_DIR=$FRESH_BUILD_PATH/zsh

fpath=(
  # prepend zsh completion wrapper for fresh to the fpath. fresh will add the required function to zshrc. @see https://github.com/freshshell/fresh/wiki/Loading-Zsh-Completions
  ~/.fresh/build/completion
  # Prepend all directories in $ZSH_DIR/functions to the fpath
  $ZSH_DIR/functions/**/
  # Prepend custom themes to the fpath
  $ZSH_DIR/prompt
  $fpath
)

# and autoload all files in $ZSH_DIR/functions
autoload -U $ZSH_DIR/functions/**/*(.:t)

# Source Prezto before our own zsh files so that we can override zsh settings
# and aliases (or unalias awkward ones)
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Source all of our own *.zsh files from ~/.fresh/build/zsh that arent already in ~/.fresh/build/shell.sh (using an anonymous function)
function
{
  typeset -U config_files
  config_files=($(find $ZSH_DIR -maxdepth 2 -type f -name "*.zsh"))

  # load the path files
  for file in ${(M)config_files:#*/path.zsh}
  do
    source $file
  done

  # load everything but the path and completion files
  for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
  do
    source $file
  done

  # initialize autocomplete here, otherwise functions won't be loaded
  autoload -U compinit; compinit

  # load every completion after autocomplete loads
  for file in ${(M)config_files:#*/completion.zsh}
  do
    source $file
  done
}

# Adding custom locations to path

# This loads nvm on first use http://broken-by.me/lazy-load-nvm/

nvm() {
  unset -f nvm
  export NVM_DIR=~/.nvm
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
  nvm "$@"
}

node() {
  unset -f node
  export NVM_DIR=~/.nvm
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
  node "$@"
}

npm() {
  unset -f npm
  export NVM_DIR=~/.nvm
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
  npm "$@"
}

## Pyenv
if [ -d "${ZDOTDIR:-$HOME}/.pyenv/bin" ]; then
  export PATH="$PATH:$HOME/.pyenv/bin"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

if [ -d "$HOME/.pyenv" ]; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi


# Load the great zmv function for bulk renaming
autoload -U zmv
## expand functions in the prompt
setopt prompt_subst
# makes color constants available
autoload -U colors
colors

# Setting various variables
export EDITOR='emacs'
export CHEATCOLORS=true
# enable colored output from ls, etc
export CLICOLOR=1


# Locale settings (utf-8)
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8

# Source fresh shell
# https://github.com/freshshell/fresh#installation
if [[ -s "${ZDOTDIR:-$HOME}/.fresh/build/shell.sh" ]]; then
  source ~/.fresh/build/shell.sh
fi

#
# Some handy directories
#

# even though we have the same data structure on all machines we need to set appropriate base paths per host.
hash -d org=~/org
if [[ "$HOST" == w* ]]; then
  export MYDATADIR="/mnt/DATA"
  # https://vincent.bernat.im/en/blog/2015-zsh-directory-bookmarks#fnref-variables
  # this should allow referencing the correct datadir path via ~-DATA
  hash -d -- -MYDATADIR=$MYDATADIR
  hash -d -- -SENSITIVE=$MYDATADIR/09-Private/SENSITIVE
  elif [[ "$HOST" == e* ]]; then
  export MYDATADIR="/mnt/MODATA"
  # https://vincent.bernat.im/en/blog/2015-zsh-directory-bookmarks#fnref-variables
  # this should allow referencing the correct datadir path via ~-DATA
  hash -d -- -MYDATADIR=$MYDATADIR
  hash -d -- -SENSITIVE=$MYDATADIR/09-Private/SENSITIVE
fi
export PROJECTS_DIR=$HOME/dev
export DOTFILES_DIR=$USR_DIR/.dotfiles
export BRAINDUMP_DIR=$USR_DIR/braindump
export XDG_CONFIG_HOME=$HOME/.config
export XDG_DATA_HOME=$USR_DIR/.local/share/
export GPODDER_DOWNLOAD_DIR="$MYDATADIR/TEMPORARY/Downloads/Gpodder"
export DEFAULT_CHEAT_DIR=~/.cheat
export CHEATPATH=~/.dotfiles/manual/cheat
export GOPATH=/usr/local/go/bin

# Add program paths individually

export PATH=$PATH:"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/git/bin:/usr/local/mysql/bin:/opt/local/bin"

## NPM
export PATH=$PATH:node_modules/.bin:/usr/local/share/npm/bin
## yarn

export PATH="$(yarn global bin):$PATH"

## Composer
export PATH=$PATH:vendor/bin:$HOME/.config/composer/vendor/bin
export PATH=$PATH:vendor/bin:$HOME/.composer/vendor/bin
## Add path to go bin
export PATH=$PATH:/usr/local/go/bin/bin



# Keybindings in zsh https://wiki.archlinux.org/index.php/Zsh#Key_bindings
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
# finding keycodes: In a shell window, hit ^v then the key
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   beginning-of-buffer-or-history
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" end-of-buffer-or-history

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init () {
    printf '%s' "${terminfo[smkx]}"
  }
  function zle-line-finish () {
    printf '%s' "${terminfo[rmkx]}"
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi
